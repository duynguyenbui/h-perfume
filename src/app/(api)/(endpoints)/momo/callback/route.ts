import { NextResponse } from 'next/server'
import crypto from 'crypto'
import { MomoIPNRequest } from '@/types/momo'
import { updatePaymentStatus } from '@/actions/orders'

// ƒê·ªãnh nghƒ©a c√°c _id c·ªßa tr·∫°ng th√°i thanh to√°n t·ª´ collection paymentStatus
const PAYMENT_STATUS_IDS = {
  PENDING: '67d83c2d5474115f08276b48', // "Pending"
  PAID: '67d83c2d5474115f08276b49', // "Paid"
  FAILED: '67d83c2d5474115f08276b4a', // "Failed" (gi·∫£ ƒë·ªãnh, thay b·∫±ng _id th·ª±c t·∫ø n·∫øu c√≥)
}

export async function POST(request: Request): Promise<NextResponse> {
  try {
    // Ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ request body (IPN t·ª´ Momo)
    const body: MomoIPNRequest = await request.json()
    console.log('üì• D·ªØ li·ªáu IPN t·ª´ Momo:', JSON.stringify(body, null, 2))
    const {
      partnerCode,
      orderId,
      requestId,
      amount,
      orderInfo,
      orderType,
      transId,
      resultCode,
      message,
      payType,
      responseTime,
      extraData,
      signature,
    } = body

    // L·∫•y secretKey v√† accessKey t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    const secretKey = process.env.MOMO_SECRET_KEY
    const accessKey = process.env.MOMO_ACCESS_KEY

    // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
    if (!secretKey || !accessKey) {
      console.error('Thi·∫øu MOMO_SECRET_KEY ho·∫∑c MOMO_ACCESS_KEY trong bi·∫øn m√¥i tr∆∞·ªùng')
      return NextResponse.json(
        { success: false, message: 'C·∫•u h√¨nh server kh√¥ng h·ª£p l·ªá' },
        { status: 500 },
      )
    }

    // X√°c minh ch·ªØ k√Ω
    const rawSignature = `accessKey=${accessKey}&amount=${amount}&extraData=${extraData}&message=${message}&orderId=${orderId}&orderInfo=${orderInfo}&orderType=${orderType}&partnerCode=${partnerCode}&payType=${payType}&requestId=${requestId}&responseTime=${responseTime}&resultCode=${resultCode}&transId=${transId}`
    const expectedSignature = crypto
      .createHmac('sha256', secretKey)
      .update(rawSignature)
      .digest('hex')

    if (signature !== expectedSignature) {
      console.warn(
        `Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá cho ƒë∆°n h√†ng ${orderId}. Nh·∫≠n: ${signature}, K·ª≥ v·ªçng: ${expectedSignature}`,
      )
      return NextResponse.json({ success: false, message: 'Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá' }, { status: 400 })
    }

    // X·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n
    let newPaymentStatusId: string
    if (resultCode === 0) {
      newPaymentStatusId = PAYMENT_STATUS_IDS.PAID // "Paid"
      console.log(`ƒê∆°n h√†ng ${orderId} thanh to√°n th√†nh c√¥ng qua Momo. TransId: ${transId}`)
    } else {
      newPaymentStatusId = PAYMENT_STATUS_IDS.FAILED // "Failed"
      console.log(
        `ƒê∆°n h√†ng ${orderId} thanh to√°n th·∫•t b·∫°i. ResultCode: ${resultCode}, Message: ${message}`,
      )
    }

    // C·∫≠p nh·∫≠t paymentStatus trong document orders
    const updateResult = await updatePaymentStatus(orderId, newPaymentStatusId)
    if (!updateResult.success) {
      console.error(
        `Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n cho ƒë∆°n h√†ng ${orderId}: ${updateResult.message}`,
      )
    } else {
      console.log(
        `C·∫≠p nh·∫≠t paymentStatus c·ªßa ƒë∆°n h√†ng ${orderId} th√†nh ${newPaymentStatusId} th√†nh c√¥ng`,
      )
    }

    // Tr·∫£ v·ªÅ ph·∫£n h·ªìi cho Momo
    return NextResponse.json({
      success: true,
      message: 'X√°c minh v√† x·ª≠ l√Ω th√†nh c√¥ng',
      orderId,
      resultCode,
    })
  } catch (error) {
    console.error(`L·ªói trong callback Momo cho ƒë∆°n h√†ng`, error)
    return NextResponse.json(
      { success: false, message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô khi x·ª≠ l√Ω callback' },
      { status: 500 },
    )
  }
}
